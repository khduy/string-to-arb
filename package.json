{
  "name": "string-to-arb-extractor",
  "displayName": "String to ARB Extractor",
  "description": "Extracts string literals to Flutter ARB files, optionally translates them using Gemini, and replaces the string with a localization key.",
  "version": "1.0.0",
  "publisher": "khduy",
  "license": "MIT",
  "icon": "icons/icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/khduy/string-to-arb-extractor"
  },
  "engines": {
    "vscode": "^1.87.0"
  },
  "categories": [
    "Programming Languages",
    "Other"
  ],
  "activationEvents": [
    "onLanguage:dart"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "configuration": {
      "title": "ARB Extractor",
      "properties": {
        "stringToArbExtractor.arbFolderPath": {
          "type": "string",
          "default": "./lib/l10n",
          "description": "Path relative to the workspace root where ARB files are stored (e.g., './lib/l10n')."
        },
        "stringToArbExtractor.sourceLanguage": {
          "type": "string",
          "default": "en",
          "description": "The language code (e.g., 'en', 'es') of the source ARB file used as the base for extraction and translation."
        },
        "stringToArbExtractor.fileNamePattern": {
          "type": "string",
          "default": "intl_{lang}.arb",
          "description": "Filename pattern for ARB files. Must include '{lang}' as the placeholder for the language code (e.g., 'app_{lang}.arb', '{lang}.arb')."
        },
        "stringToArbExtractor.prefix": {
          "type": "string",
          "default": "S.current",
          "description": "The prefix used when replacing the selected string in Dart code (e.g., 'S.current', 'context.l10n', 'AppLocalizations.of(context)!')."
        },
        "stringToArbExtractor.autoTranslate": {
          "type": "boolean",
          "default": true,
          "description": "Enable automatic translation of the extracted string to other detected ARB language files using the configured Gemini API Key."
        },
        "stringToArbExtractor.geminiApiKey": {
          "type": "string",
          "default": "",
          "markdownDescription": "Your Google AI Gemini API Key for auto-translation. **Security Note:** Storing keys directly in `settings.json` can be insecure, especially in shared projects. Consider using VS Code's Secret Storage API, environment variables, or ensuring `settings.json` is in your `.gitignore`."
        },
        "stringToArbExtractor.importStatement": {
          "type": "string",
          "default": "",
          "description": "(Optional) The full import statement (e.g., 'import \\'package:my_app/l10n/l10n.dart\\';') required for the prefix. If provided, the extension will attempt to add it to the Dart file if missing after extraction. Leave empty to disable this feature."
        },
        "stringToArbExtractor.postExtractionCommand": {
          "type": "string",
          "default": "",
          "description": "Command to execute in the workspace root after successfully extracting/updating ARB files (e.g., 'flutter gen-l10n'). Leave empty to disable."
        }
      }
    },
    "commands": [
      {
        "command": "string-to-arb-extractor.extractString",
        "title": "ARB: Extract String",
        "category": "ARB Extractor"
      },
      {
        "command": "string-to-arb-extractor.extractStringFromContext",
        "title": "ARB: Extract String (Context Menu Action)",
        "category": "ARB Extractor"
      },
      {
        "command": "string-to-arb-extractor.openSettings",
        "title": "ARB: Open Extractor Settings",
        "category": "ARB Extractor"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "when": "editorHasSelection && editorLangId == 'dart'",
          "command": "string-to-arb-extractor.extractStringFromContext",
          "group": "1_modification"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "esbuild src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
    "watch": "esbuild src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node --watch",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "package": "npx vsce package"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.6",
    "@types/node": "^18.x",
    "@types/vscode": "^1.87.0",
    "@typescript-eslint/eslint-plugin": "^7.0.0",
    "@typescript-eslint/parser": "^7.0.0",
    "esbuild": "^0.25.1",
    "eslint": "^8.56.0",
    "vsce": "^2.15.0"
  }
}
